# -*- coding: utf-8 -*-
"""PracticalDSProj1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KSV_GmZXeBZJ2Fn-tHOvjUrKc6w3i6w_
"""

import keras
keras.__version__
from keras import layers
from keras import models

import matplotlib as plt
import numpy as np
import pandas as pd
import requests
import io

url="http://www.utdallas.edu/~pxg180009/train.csv"
x=requests.get(url).content
train=pd.read_csv(io.StringIO(x.decode('utf-8')))

train.head()

all_image_pixels=[]
for i in range(len(train)):
  all_image_pixels.append((train['pixels'][i].split(" ")))

train_data = np.array(all_image_pixels)
train_data

train_data_int = train_data.astype(np.float)
train_data_int

train_images = train_data_int.reshape((28709, 48, 48, 1))
train_images = train_images.astype('float32') / 255

from keras.utils import to_categorical
train_labels = to_categorical(train['emotion'])

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(48, 48, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(7, activation='softmax'))

model.summary()

opt = keras.optimizers.RMSprop(lr=0.001, decay=1e-6)
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

training_images = train_images[:20096]
training_labels = train_labels[:20096]

testing_images = train_images[20096:]
testing_labels = train_labels[20096:]

model_history = model.fit(training_images, training_labels, epochs=10, batch_size=64)

import matplotlib.pyplot as plt
plt.plot(model_history.history['loss'])
plt.xlabel('epoch')
plt.ylabel('loss')
plt.title('Training loss')
plt.show()

plt.plot(model_history.history['acc'])
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.title('Training accuracy')
plt.show()

test_loss, test_acc = model.evaluate(testing_images, testing_labels)

test_acc

predictions = model.predict_classes(testing_images)

predictions

for i in range(0,25):
  plt.figure()
  plt.imshow(testing_images[i].reshape(48,48))
  plt.title("True label:" + str(train["emotion"][20096+i]) + "|| Predicted label:" + str(predictions[i]))